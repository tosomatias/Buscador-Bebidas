{"version":3,"sources":["components/Header.js","context/CategoriasContext.js","context/RecetasContext.js","components/Formulario.js","context/ModalContext.js","components/Receta.js","components/ListaRecetas.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CategoriasContext","createContext","CategoriasProvider","props","useState","categorias","guardarCategorias","useEffect","a","Axios","get","data","drinks","obtenerCategorias","Provider","value","children","RecetasContext","RecetasProvider","recetas","guardarRecetas","nombre","categoria","busqueda","buscarRecetas","consultar","guardarConsultar","url","resultado","obtenerRecetas","Formulario","useContext","guardarBusqueda","obtenerDatosReceta","e","target","name","onSubmit","preventDefault","type","placeholder","onChange","map","key","strCategory","ModalContext","ModalProvider","idreceta","guardarIdReceta","informacion","guardarReceta","obtenerReceta","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","Receta","receta","modalStyle","open","setOpen","classes","strDrink","src","strDrinkThumb","alt","onClick","idDrink","Modal","onClose","style","strInstructions","ingredientes","i","push","mostrarIngredientes","ListaRecetas","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16746300.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Header = () => {\r\n    return (  \r\n        <header>\r\n            <h1 className=\"bg-alert\">Busca Recetas de Bebidas</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import Axios from 'axios';\r\nimport React,{ createContext,useEffect,useState} from 'react';\r\n\r\n\r\nexport const CategoriasContext = createContext();\r\n\r\n\r\n//Provider\r\nconst CategoriasProvider = (props) => {\r\n    const [categorias,guardarCategorias] = useState([]);\r\n\r\n    useEffect(() => {\r\n        \r\n        const obtenerCategorias = async() => {\r\n            const url = 'https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list';\r\n            const categorias = await Axios.get(url);\r\n            \r\n            guardarCategorias(categorias.data.drinks);\r\n\r\n        }\r\n        obtenerCategorias();\r\n    },[]);\r\n\r\n    return(\r\n        <CategoriasContext.Provider\r\n            value={{\r\n                categorias\r\n            }}\r\n        >\r\n            {props.children}\r\n        </CategoriasContext.Provider>\r\n    );\r\n\r\n}\r\nexport default CategoriasProvider;","import Axios from 'axios';\r\nimport React ,{ createContext,useEffect,useState }from 'react';\r\n\r\nexport const RecetasContext = createContext();\r\n\r\n\r\nconst RecetasProvider = (props) => {\r\n    const [recetas,guardarRecetas]= useState([]);\r\n    const [busqueda,buscarRecetas] = useState({\r\n        nombre:'',\r\n        categoria:''\r\n    });\r\n    const [consultar,guardarConsultar] = useState(false);\r\n    const {nombre,categoria} = busqueda;\r\n\r\n    useEffect(() => {\r\n        if(consultar){\r\n            const obtenerRecetas = async() => {\r\n                const url = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${nombre}&c=${categoria}`;\r\n                const resultado = await Axios.get(url);\r\n                guardarRecetas(resultado.data.drinks);\r\n            }\r\n        obtenerRecetas();\r\n        }\r\n    \r\n    },[busqueda,categoria,consultar,nombre]);\r\n\r\n\r\n    return(\r\n        <RecetasContext.Provider\r\n            value = {{\r\n                recetas,\r\n                buscarRecetas,\r\n                guardarConsultar,\r\n                \r\n                \r\n\r\n            }}\r\n        >\r\n            {props.children}\r\n        </RecetasContext.Provider>\r\n    );\r\n\r\n}\r\nexport default RecetasProvider;","import React, { useContext,useState } from 'react';\r\nimport {CategoriasContext} from '../context/CategoriasContext';\r\nimport {RecetasContext} from '../context/RecetasContext';\r\n\r\n\r\nconst Formulario = () => {\r\n\r\n    const {categorias} = useContext(CategoriasContext);\r\n    const {buscarRecetas,guardarConsultar} = useContext(RecetasContext);\r\n    const [busqueda,guardarBusqueda] = useState({\r\n        nombre:'',\r\n        categoria:''\r\n    });\r\n\r\n    const {nombre,categoria} = busqueda;\r\n\r\n    const obtenerDatosReceta = e => {\r\n        guardarBusqueda({\r\n            ...busqueda,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n\r\n    return (  \r\n        <form\r\n            className=\"col-12\"\r\n            onSubmit = {e => {\r\n                e.preventDefault();\r\n                buscarRecetas(busqueda);\r\n                guardarConsultar(true);\r\n            }}\r\n        >\r\n            <fieldset className=\"text-center mt-4\">\r\n                <legend>Busca Bebidas por Ingrediente o Categorias</legend>\r\n            </fieldset>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4  mt-2\">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"nombre\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Buscar por Ingrediente\"\r\n                        value={nombre}\r\n                        onChange = {obtenerDatosReceta}\r\n                    />    \r\n                </div>\r\n                <div className=\"col-md-4 mt-2\">\r\n                    <select\r\n                        className=\"form-control\"\r\n                        name=\"categoria\"\r\n                        value = {categoria}\r\n                        onChange = {obtenerDatosReceta}\r\n                    >\r\n                    <option value=\"\">--Selecciona Categoria --</option>\r\n                    {categorias.map(categoria =>(\r\n                        <option key={categoria.strCategory} value={categoria.strCategory}>{categoria.strCategory}</option>\r\n                    ))}\r\n                    </select>\r\n                </div>\r\n                <div className=\"col-md-4 mt-2\">\r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-block btn-primary\"\r\n                        value=\"Buscar Bebidas\"\r\n                    />    \r\n\r\n                </div>\r\n\r\n            </div>\r\n        </form>\r\n\r\n    );\r\n}\r\n\r\nexport default Formulario;","import Axios from 'axios';\r\nimport React, { createContext,useEffect,useState } from 'react';\r\n\r\nexport const ModalContext = createContext();\r\n\r\nconst ModalProvider = (props) => {\r\n\r\n    const [idreceta ,guardarIdReceta] = useState(null);\r\n    const [informacion,guardarReceta] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const obtenerReceta = async() => {\r\n            if(!idreceta) return;\r\n            const url = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idreceta}`;\r\n                    \r\n            const resultado = await Axios.get(url);\r\n            \r\n            guardarReceta(resultado.data.drinks[0]);\r\n\r\n        }\r\n        obtenerReceta();\r\n    },[idreceta]);\r\n\r\n    return ( \r\n        <ModalContext.Provider\r\n            value={{\r\n                guardarReceta,\r\n                guardarIdReceta,\r\n                informacion,\r\n            \r\n            }}\r\n        >\r\n            {props.children}\r\n        </ModalContext.Provider>\r\n    );\r\n\r\n}\r\nexport default ModalProvider;","import React ,{useContext,useState}from 'react';\r\nimport {ModalContext} from '../context/ModalContext';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 ;\r\n    const left = 50;\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 275,\r\n        \r\n        backgroundColor: theme.palette.background.paper,\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\n\r\nconst Receta = ({receta}) => {\r\n\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const[open,setOpen] = useState(false);\r\n    const classes = useStyles();\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose =  () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n\r\n    const {informacion,guardarIdReceta,guardarReceta} = useContext(ModalContext);\r\n\r\n    const mostrarIngredientes = informacion => {\r\n        let ingredientes = [];\r\n        for(let i = 1; i < 16; i++){\r\n            if( informacion[`strIngredient${i}`] ) {\r\n                ingredientes.push(\r\n                    <li> { informacion[`strIngredient${i}`] }  { informacion[`strMeasure${i}`] }</li>\r\n                )\r\n            }\r\n        }\r\n\r\n        return ingredientes;\r\n    }\r\n    \r\n\r\n    return (  \r\n        <div className=\"col-md-4 mb-3\">\r\n            <div className=\"card \">\r\n                <h2 className=\"card-header\">{receta.strDrink}</h2>\r\n                <img  className=\"card-img-top\" src={receta.strDrinkThumb} alt={`imagen de ${receta.strDrink}`}/>\r\n                <div className=\"card-body\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-block btn-primary\"\r\n                        onClick={() => {\r\n                            guardarIdReceta(receta.idDrink);\r\n                            handleOpen();\r\n                        }}\r\n                    >Ver receta</button>\r\n                    <Modal\r\n                        open= {open}\r\n                        onClose= {() => {\r\n                            guardarIdReceta(null);\r\n                            guardarReceta({});\r\n                            handleClose();\r\n                            \r\n                        }}\r\n                    >\r\n                        <div style={modalStyle} className={classes.paper}>\r\n                            <h2>{informacion.strDrink}</h2>\r\n                            <h3 className=\"mt-4\">Instrucciones </h3>\r\n                            <p>\r\n                            {informacion.strInstructions}\r\n                            </p>\r\n                            <img className=\"img-fluid my-4\" src={informacion.strDrinkThumb} alt=\"esta\"/>\r\n                            <h3>Ingredientes y Cantidades</h3>\r\n                            <ul>\r\n                                {mostrarIngredientes(informacion)}\r\n                            </ul>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n\r\n                \r\n\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Receta;","import React,{useContext} from 'react';\r\nimport {RecetasContext} from '../context/RecetasContext';\r\nimport Receta from './Receta';\r\n\r\n\r\nconst ListaRecetas = () => {\r\n    const {recetas} = useContext(RecetasContext);\r\n    \r\n    return (  \r\n        <div className= \"row mt-5\">\r\n            {recetas.map(receta => (\r\n                <Receta\r\n                    key = {receta.idDrink}\r\n                    receta = {receta}\r\n                />    \r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListaRecetas;","import React, {  } from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport CategoriasProvider from './context/CategoriasContext';\nimport RecetasProvider from './context/RecetasContext';\nimport ModalProvider from './context/ModalContext';\nimport ListaRecetas from './components/ListaRecetas';\n\nfunction App() {\n  return (\n    <CategoriasProvider>\n      <RecetasProvider>\n        <ModalProvider>\n\n          <Header\n          />  \n          <div className=\"container\">\n            <div className=\"row\">\n              \n              <Formulario \n              />\n            </div>\n            <ListaRecetas />\n          </div>\n        </ModalProvider>\n      </RecetasProvider>\n    </CategoriasProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './boostrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}